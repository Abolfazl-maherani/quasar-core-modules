@function transform-number-to-string($value) {
  @if type-of($value) == "number" {
    @return #{$value};
  } @else if type-of($value) == "string" {
    @return $value;
  } @else {
    @error 'Input #{$value} is no number or string';
  }
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

.bg-primary-variant {
  background: rgba($primary, 0.2) !important;
}

.bg-secondary-variant {
  background: rgba($secondary, 0.2);
}

.bg-negative-variant {
  background: rgba($negative, 0.2) !important;
}

.text-negative-variant {
  color: rgba($negative, 0.2) !important;
}

.bg-warning-variant {
  background: rgba($warning, 0.2) !important;
}

.text-warning-variant {
  color: rgba($warning, 0.2) !important;
}

.bg-positive-variant {
  background: rgba($positive, 0.2) !important;
}

.text-positive-variant {
  color: rgba($positive, 0.2) !important;
}

.text-warning {
}

.text-primary-variant {
  color: $primary !important;
}

.text-secondary-variant {
  color: $secondary !important;
}

.border-primary-variant {
  border-color: rgba($primary, 0.2);
}
/* TODO: Fix selector for ignore every element that has `no-path-stroke` */
.path-stroke :not(.no-path-stroke  svg,.no-path-stroke  svg path){
  stroke: currentColor !important;
}

.path-fill > svg path,
.path-fill svg path,
.path-fill path {
  fill: currentColor !important;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 200ms ease-in-out;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
